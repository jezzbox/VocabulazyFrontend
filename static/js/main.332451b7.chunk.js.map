{"version":3,"sources":["components/Header.js","components/Phrase.js","components/Phrases.js","App.js","reportWebVitals.js","index.js"],"names":["Header","title","className","defaultProps","Phrase","phrase","phraseId","Phrases","phrases","map","phraseID","App","useState","setPhrases","useEffect","a","fetchPhrases","phrasesFromServer","getPhrases","fetch","res","json","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAEMA,EAAS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEd,OACI,wBAAQC,UAAU,SAAlB,SACI,6BAAKD,OAKjBD,EAAOG,aAAe,CAClBF,MAAO,gBAaID,QChBAI,EATA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OACI,gCACI,6BAAKA,EAAOC,WACZ,4BAAID,EAAOA,aCQRE,EAVC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACI,mCACKA,EAAQC,KAAI,SAACJ,GAAD,OACT,cAAC,EAAD,CAA8BA,OAAQA,GAAzBA,EAAOK,gBCwBrBC,MA3Bf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNJ,EADM,KACGK,EADH,KAGbC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACeC,IADf,OACXC,EADW,OAEjBJ,EAAWI,GAFM,2CAAH,qDAIhBC,KACC,IAGH,IAAMF,EAAY,uCAAG,8BAAAD,EAAA,sEACDI,MAAM,8DADL,cACbC,EADa,gBAEAA,EAAIC,OAFJ,cAEbC,EAFa,yBAIZA,GAJY,2CAAH,qDAOlB,OACE,sBAAKpB,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAASM,QAASA,QCbTe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.332451b7.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\n\nconst Header = ({ title }) => {\n\n    return (\n        <header className='header'>\n            <h1>{title}</h1>\n        </header>\n    )\n}\n\nHeader.defaultProps = {\n    title: 'Task Tracker'\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n}\n\n//CSS IN JS\n// const headingStyle = {\n//     color: 'red',\n//     backgroundColor: 'black'\n// }\n\nexport default Header\n","const Phrase = ({ phrase }) => {\n    return (\n        <div>\n            <h3>{phrase.phraseId}</h3>\n            <p>{phrase.phrase}</p>\n        </div>\n    )\n}\n\nexport default Phrase","import Phrase from './Phrase'\n\nconst Phrases = ({ phrases }) => {\n    return (\n        <>\n            {phrases.map((phrase) => (\n                <Phrase key={phrase.phraseID} phrase={phrase}/>\n            ))}\n        </>\n    )\n}\n\nexport default Phrases","import { useState, useEffect } from 'react'\nimport Header from './components/Header'\nimport Phrases from './components/Phrases'\nfunction App() {\n  const [phrases, setPhrases] = useState([])\n\n  useEffect(() => {\n    const getPhrases = async () => {\n      const phrasesFromServer = await fetchPhrases()\n      setPhrases(phrasesFromServer)\n    }\n    getPhrases()\n  }, [])\n\n  // fetch tasks\n  const fetchPhrases = async () => {\n    const res = await fetch('https://localhost:44386/api/Vocabulazy/phrases?verb=hablar')\n    const data = await res.json()\n\n    return data\n  }\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <Phrases phrases={phrases} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}