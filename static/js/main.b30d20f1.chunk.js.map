{"version":3,"sources":["components/Header/SecondaryNavbar.js","components/Header/vocabulazy-logo.svg","components/Header/Header.js","components/LoginButton.js","components/Button.js","components/Welcome.js","components/Flashcard.js","Constants/WORD_TYPES.js","Actions/FetchData.js","Actions/ProcessFlashcards.js","Constants/DEFAULT_DECK_SETTINGS.js","Actions/GenerateParameterUrl.js","Actions/ProcessCard.js","components/Flashcards.js","components/DeckSection/CurrentDeck.js","Actions/UpdateFlashcards.js","components/TestTable.js","components/DeckSection/AddFlashcards.js","components/DeckSection/DeckForm.js","components/DeckSection/DeckSection.js","Actions/UseFetch.js","components/ChangeUserSettings.js","components/TableItem.js","components/Table.js","Actions/GetDecksData.js","App.js","reportWebVitals.js","index.js"],"names":["SecondaryNavbar","isAuthenticated","isLoading","className","to","Header","src","logo","alt","defaultProps","title","LoginButton","loginWithRedirect","useAuth0","onClick","Button","text","Welcome","Flashcard","flashcard","showVerb","minutes","Math","floor","startTime","timeString","spanishPhrase","word","englishPhrase","wordType","conjugationTense","conjugationForm","conjugationType","showTitle","seasonNumber","episodeNumber","WORD_TYPES","verb","id","adjective","adverb","noun","preposition","pronoun","conjunction","article","fetchData","url","a","method","bodyData","baseUrl","fetch","res","json","dataFromServer","error","headers","body","JSON","stringify","processFlashcards","deck","flashcards","h","flashcardType","length","flashcardId","phase","learningStep","dueDate","lapseCount","isSuspended","processedCard","push","DEFAULT_DECK_SETTINGS","name","useSubjunctive","useInfinitive","useIndicative","useImperative","useParticiple","usePreterite","useImperfect","useFuture","usePresent","useYo","useTu","useEl","useVos","useEllos","useNosotros","useVosotros","generateParameterUrl","currentDeck","parameterUrl","Object","entries","key","value","slice","processCard","buttonClicked","intervalModifier","learningSteps","graduatingInterval","easyInterval","easyBonus","getNewDueDate","interval","currentTime","Date","setMinutes","getMinutes","toJSON","newLearningStep","newEase","newInterval","newLapseCount","newIsSuspended","ease","Number","isInteger","nextDue","find","step","stepNumber","stepInterval","newDueDate","newPhase","processAgainCard","easyBonusModifier","easeModifier","processGraduatedCard","increment","processLearningCard","Flashcards","setCurrentDeck","userProfile","useState","isFinished","setIsFinished","setFlashcards","setShowVerb","setFlashcard","todaysCards","setTodaysCards","flashcardNumber","setFlashcardNumber","setLearningSteps","learnAheadTime","setLearnAheadTime","useEffect","console","log","i","learningStepsString","steps","split","parseInt","getCutoff","customTime","dateTo","setHours","getHours","setDate","getDate","filterCards","cards","cardType","cardLimit","filteredCards","filter","card","reviewCards","reviewsPerDay","learningCards","newCards","newCardsPerDay","todaysCardsFromServer","deckId","currentFlashcard","assign","parameters","phraseFromServer","random","phrase","phraseNumber","endTime","subtitleId","getFlashcard","getPatchData","updateData","patchData","onClickButton","options","updatedCard","updatedDeck","CurrentDeck","updateFlashcards","updatedFlashcards","addFlashcards","flashcardsToAdd","flashcardsToRemove","j","event","jsonDate","addData","Phase","currentFlashcards","some","x","TestTable","columns","data","tableInstance","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","AddFlashcards","decks","setDecks","searchString","setSearchString","searchResult","setSearchResult","showResult","setShowResult","setIsLoading","flashcardsInDeck","setFlashcardsInDeck","filterString","setFilterString","cardsToSuspend","onSubmitSearch","e","preventDefault","alert","onClickSubmit","clickYes","newDecks","confirmAlert","message","buttons","label","onClickSuspend","changeCardSuspension","objIndex","findIndex","searchResultsColumns","accessor","Cell","values","CurrentFlashcardsColumns","original","onSubmit","type","placeholder","onChange","target","toLowerCase","color","DeckForm","initialDeckSettings","processDeck","headerText","onClickBack","setName","setUseSubjunctive","setUseIndicative","setUseImperative","setUseParticiple","setUsePreterite","setUseImperfect","setUseFuture","setUsePresent","IsDefault","isDefault","setIsDefault","setUseInfinitive","setUseYo","setUseTu","setUseEl","setUseVos","setUseEllos","setUseNosotros","setUseVosotros","checked","currentTarget","DeckSection","updateDeck","path","exact","useFetch","updatedData","resource","isPending","setIsPending","setData","setError","user","authIdentifier","sub","status","getData","ChangeUserSettings","setUpdatedUserProfile","displayName","setDisplayName","defaultDeckId","undefined","setDefaultDeckId","setNewCardsPerDay","setGraduatingInterval","setEasyInterval","startingEase","setStartingEase","setSteps","setReviewsPerDay","setEasyBonus","setIntervalModifier","maximumInterval","setMaximumInterval","updatedUser","userId","TableItem","tableItem","header","index","objectProperty","Table","tableData","showHeaders","columnName","getDecksData","deleteDeck","processedData","deckCopy","create","select","wordCount","dueCount","deleteButton","onClickDelete","App","updatedUserProfile","getDefaultDeck","useCallback","defaultDeck","newestDeck","reduce","l","d","newCurrentDeck","addDeck","deckToAdd","newDeck","activeClassName","xmlns","fill","viewBox","stroke","stroke-linecap","stroke-linejoin","stroke-width","fill-rule","clip-rule","class","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","domain","process","local","REACT_APP_AUTH0_DOMAIN","clientId","REACT_APP_AUTH0_CLIENT_ID","ReactDOM","redirectUri","window","location","origin","document","getElementById"],"mappings":"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","file":"static/js/main.b30d20f1.chunk.js","sourcesContent":["import './navbar.css'\nimport { Link } from 'react-router-dom'\nconst SecondaryNavbar = ({ isAuthenticated, isLoading }) => {\n    return (\n\n     <nav className=\" border-terraCotta-500 border-2 m-4 flex justify-end items-end p-2  rounded-full\">\n        <Link className=\" text-xl hover:text-viola-600\" to=\"\\\">About</Link>\n        {isLoading ||!isAuthenticated ?\n        <>\n            <Link className=\" ml-5 text-xl hover:text-viola-600\" to=\"\\\">Log in</Link>\n            <Link className=\" ml-5 text-xl hover:text-viola-600\" to=\"\\\">Sign up</Link>\n        </> :\n        <Link className=\" ml-5 text-xl hover:text-viola-600\" to=\"\\\">Log out</Link>}\n     </nav>\n    )\n};\n\nexport default SecondaryNavbar\n\n","export default __webpack_public_path__ + \"static/media/vocabulazy-logo.49aec4d6.svg\";","import PropTypes from 'prop-types'\nimport SecondaryNavbar from './SecondaryNavbar'\nimport logo from './vocabulazy-logo.svg'\n\nconst Header = ({isAuthenticated, isLoading}) => {\n\n\n    return (\n        <header className=\"flex flex-wrap justify-center sm:justify-between h-78 md:h-20 \">\n            <div className=\"flex items-center h-20\">\n                <div>\n                    <img className=\"object-contain p-2 h-20\" src={logo} alt = \"logo\"/>\n                </div>\n                <h1 className=\"text-center text-viola-600 text-5xl p-2\">VocabuLazy</h1>\n            </div>\n            <SecondaryNavbar isAuthenticated={isAuthenticated} isLoading = {isLoading} />\n        </header>\n    )\n}\n\nHeader.defaultProps = {\n    title: 'Vocabulazy'\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n}\n\n//CSS IN JS\n// const headingStyle = {\n//     color: 'red',\n//     backgroundColor: 'black'\n// }\n\nexport default Header\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst LoginButton = ({className}) => {\n  const { loginWithRedirect } = useAuth0();\n\n  return <button className={className} onClick={() => loginWithRedirect()}>Log In</button>;\n};\n\nexport default LoginButton;","import PropTypes from 'prop-types'\nconst Button = ({ text, onClick, className }) => {\n    return <button\n        onClick={onClick}\n        className={className}>{text}</button>\n}\n\nButton.defaultProps = {\n    className: 'btn'\n}\n\nButton.propTypes = {\n    text: PropTypes.string,\n    className: PropTypes.string,\n    onClick: PropTypes.func,\n}\n\nexport default Button\n","import React from \"react\";\nimport LoginButton from './LoginButton'\nimport Button from './Button'\n\nconst Welcome = () => {\n\n\n    return (\n        <article >\n          <header className=\"flex justify-center p-6\">\n            <h1 className=\"text-center text-5xl\">Welcome to VocabuLazy!</h1>\n          </header>\n          <>\n          <div className=\"flex justify-center p-6\">\n            <p className=\"text-xl\">VocabuLazy is a flashcard app based on Anki specifically for Spanish vocabulary.</p>\n          </div>\n          \n          <div className=\"flex justify-center\">\n            <LoginButton className=\"btn border-2 shadow-md border-terraCotta-500 hover:bg-terraCotta-400 hover:shadow-inner ml-2\" />\n            <Button className=\"btn border-2 shadow-md border-terraCotta-500 hover:bg-terraCotta-400 hover:shadow-inner ml-2\" text=\"Try it out\" />\n          </div>\n          </>\n        </article>\n        );\n};\n\nexport default Welcome;\n","const Flashcard = ({ flashcard, showVerb }) => {\n\n    const minutes = Math.floor(flashcard.startTime / 6000)\n    const seconds = Math.floor((flashcard.startTime / 100) - minutes * 60)\n    const timeString = minutes + ':' + seconds\n    return (\n        <div>\n            <h1>{flashcard.spanishPhrase} <em><strong>({flashcard.word})</strong></em></h1>\n            {showVerb && <h2>{flashcard.englishPhrase}</h2>}\n            {showVerb && flashcard.wordType === 'verb' && <h2>{flashcard.word} - {flashcard.conjugationTense} {flashcard.conjugationForm} {flashcard.conjugationType}</h2>}\n            {showVerb && flashcard.wordType === 'verb' && <h2>{flashcard.showTitle} - Season {flashcard.seasonNumber}, episode {flashcard.episodeNumber}, start time {timeString} Mins</h2>}\n        </div>\n    )\n}\n\nexport default Flashcard\n","const WORD_TYPES = {\n    verb: { id: \"verbId\", flashcard: \"verbFlashcards\" , wordType:\"verb\" },\n    adjective: { id: \"adjectiveId\", flashcard: \"adjectiveFlashcards\",wordType:\"adjective\" },\n    adverb: { id: \"adverbId\", flashcard: \"adverbFlashcards\",wordType:\"adverb\" },\n    noun: { id: \"nounId\", flashcard: \"nounFlashcards\",wordType:\"noun\" },\n    preposition: { id: \"prepositionId\", flashcard: \"prepositionFlashcards\",wordType:\"preposition\" },\n    pronoun: { id: \"pronounId\", flashcard: \"pronounFlashcards\",wordType:\"pronoun\" },\n    conjunction: { id: \"conjunctionId\", flashcard: \"conjunctionFlashcards\",wordType:\"conjunction\" },\n    article: { id: \"articleId\", flashcard: \"articleFlashcards\",wordType:\"article\" }\n}\n\nexport default WORD_TYPES\n","const fetchData = async (url,method='GET',bodyData=[]) => {\n    try {\n        const baseUrl = `https://api.vocabulazy.net/`\n\n        if(method==='GET') {\n        const res = await fetch(baseUrl + url)\n        const dataFromServer = await res.json()\n        return { dataFromServer, error:null }\n        }\n\n        else if(method==='DELETE') {\n            await fetch(baseUrl + url, {\n                method: 'DELETE',\n            })\n            return { dataFromServer:[], error:null }\n            \n        }\n\n        else {\n            const res = await fetch(baseUrl + url,{\n                        method: method,\n                        headers: {\n                            'Content-type': 'application/json'\n                        },\n                        body: JSON.stringify(bodyData)\n                    })\n            const dataFromServer = await res.json()\n            return { dataFromServer, error:null }\n\n        }\n        \n    } catch (error) {\n        return { dataFromServer:[], error }\n    }\n    \n    //     return dataFromServer;\n\n    // const getData = async () => {\n    //     const res = await fetch(baseUrl+ url)\n    //     const dataFromServer = await res.json()\n    //     return dataFromServer;\n    // }\n\n    // const changeData = async(method=method) => {\n    //     const res = await fetch(baseUrl+ url, {\n    //         method: method,\n    //         headers: {\n    //             'Content-type': 'application/json'\n    //         },\n    //         body: JSON.stringify(body)\n    //     })\n    //     const dataFromServer = await res.json()\n    //     return dataFromServer;\n\n    // }\n\n    // const fetchData = async () => {\n    //     if(url === null) {\n    //         console.log(\"loading ...\")\n    //         setIsPending(false)\n    //         return\n    //     }\n    //     else if (method === 'GET') {\n    //         const dataFromServer = await getData()\n\n    //         if(postOn404 && dataFromServer.status === 404) {\n    //             const dataFromServer = await changeData('POST')\n    //             setData(dataFromServer)\n    //             setIsPending(false)\n    //         }\n    //         else {\n    //             setData(dataFromServer)\n    //             console.log(data)\n    //             console.log(dataFromServer)\n    //             setIsPending(false)\n    //         }\n\n    //     }\n\n    //     else if (method === 'DELETE') {\n    //         await fetch(baseUrl+ url, {\n    //             method: 'DELETE',\n    //         })\n    //         setIsPending(false)\n    //     }\n\n    //     else {\n    //         const dataFromServer = await changeData()\n    //         setData(dataFromServer)\n    //         setIsPending(false)\n    //     }\n}\n\nexport default fetchData;","import WORD_TYPES from '../Constants/WORD_TYPES'\n\nconst processFlashcards = (deck) => {\n    const flashcards = []\n    for (const wordType in WORD_TYPES) {\n      var h;\n      const flashcardType = WORD_TYPES[wordType][\"flashcard\"]\n      const id = WORD_TYPES[wordType]['id']\n      if(deck[flashcardType] === null) {\n        deck[flashcardType] = []\n      }\n      for (h = 0; h < deck[flashcardType].length; h++) {\n        const flashcard = deck[flashcardType][h]\n        const flashcardId = flashcard[\"flashcardId\"]\n        const phase = flashcard[\"phase\"]\n        const learningStep = flashcard[\"learningStep\"]\n        const dueDate = flashcard[\"dueDate\"]\n        const lapseCount = flashcard[\"lapseCount\"]\n        const isSuspended = flashcard[\"isSuspended\"]\n\n        const processedCard = { word: flashcard[wordType], wordType: wordType, flashcardId, phase, learningStep, dueDate, lapseCount, isSuspended }\n        processedCard[id] = flashcard[id]\n        flashcards.push(processedCard)\n      }\n  }\n  return flashcards;\n}\n\nexport default processFlashcards\n","const DEFAULT_DECK_SETTINGS = {\n    name: ''\n    , useSubjunctive: true\n    , useInfinitive: true\n    , useIndicative: true\n    , useImperative: true\n    , useParticiple: true\n    , usePreterite: true\n    , useImperfect: true\n    , useFuture: true\n    , usePresent: true\n    , useYo: true\n    , useTu: true\n    , useEl: true\n    , useVos: false\n    , useEllos: true\n    , useNosotros: true\n    , useVosotros: true\n}\n\nexport default DEFAULT_DECK_SETTINGS","import DEFAULT_DECK_SETTINGS from '../Constants/DEFAULT_DECK_SETTINGS'\nconst generateParameterUrl = (currentDeck=DEFAULT_DECK_SETTINGS) => {\n    var parameterUrl = '?'\n    for (let [key, value] of Object.entries(DEFAULT_DECK_SETTINGS)) {\n        if(currentDeck[key] === false) {\n            parameterUrl += `${key}=${value}&`\n        }\n    }\n    parameterUrl = parameterUrl.slice(0,-1)\n    return parameterUrl\n}\n\nexport default generateParameterUrl\n","\nconst processCard = (buttonClicked, flashcard, { intervalModifier = null, learningSteps = null, graduatingInterval = null, easyInterval = null, easyBonus = null }) => {\n\n    const getNewDueDate = (interval) => {\n        const currentTime = new Date()\n        const dueDate = (new Date(currentTime.setMinutes(currentTime.getMinutes() + interval))).toJSON()\n        return dueDate;\n    }\n\n    const processLearningCard = (buttonClicked, flashcard, learningSteps, graduatingInterval, easyInterval) => {\n\n        const increment = buttonClicked === \"Easy\" ? 1 : 0\n\n        //checks if step will graduate card\n        if (flashcard.learningStep + increment < learningSteps.length) {\n\n            const nextDue = learningSteps.find((step) => step.stepNumber === flashcard.learningStep + increment + 1).stepInterval\n            const newLearningStep = flashcard.learningStep + increment + 1\n            const newDueDate = getNewDueDate(nextDue)\n            return { newEase: null, newPhase: \"Learning\", newInterval: null, newLearningStep, newDueDate, newLapseCount: null, newIsSuspended: null }\n\n        }\n        else {\n            var newInterval = graduatingInterval * 24 * 60;\n            if (flashcard.interval > 0) {\n                newInterval = flashcard.interval;\n            }\n            else if (buttonClicked === \"Easy\" && flashcard.learningStep + 1 === learningSteps.length) {\n                newInterval = easyInterval * 24 * 60;\n            }\n\n            const newLearningStep = learningSteps.length\n            const newDueDate = getNewDueDate(newInterval)\n            return { newEase: null, newPhase: \"Graduated\", newInterval, newLearningStep, newDueDate, newLapseCount: null, newIsSuspended: null }\n        }\n    }\n\n    const processGraduatedCard = (buttonClicked, flashcard, intervalModifier, easyBonus) => {\n\n        const newEase = flashcard.ease + (buttonClicked === \"Easy\" ? 15 : buttonClicked === \"Hard\" ? -15 : 0)\n\n        const easyBonusModifier = easyBonus ? (easyBonus / 100) : 1\n        const easeModifier = buttonClicked === \"Hard\" ? 120 : flashcard.ease\n\n        const newInterval = (intervalModifier * flashcard.interval * easeModifier * easyBonusModifier) / 10000\n        const newDueDate = getNewDueDate(newInterval)\n\n        return { newEase, newPhase: null, newInterval, newLearningStep: null, newDueDate, newLapseCount: null, newIsSuspended: null }\n\n    }\n\n    const processAgainCard = (flashcard, learningSteps) => {\n        var newLearningStep = 1;\n        var newEase = null;\n        var newInterval = null;\n        var newLapseCount = null;\n        var newIsSuspended = null;\n\n        if (flashcard.phase === \"Graduated\") {\n            newLearningStep = 2\n            newEase = flashcard.ease - 20\n            newInterval = 1 * 24 * 60\n            newLapseCount = flashcard.lapseCount + 1\n        }\n        if (newLapseCount === 8 || (newLapseCount > 8 && Number.isInteger((newLapseCount - 8) / 4))) {\n            newIsSuspended = true;\n        }\n\n        const nextDue = learningSteps.find((step) => step.stepNumber === newLearningStep).stepInterval\n        const newDueDate = getNewDueDate(nextDue)\n        return { newEase, newPhase: \"Learning\", newInterval, newLearningStep, newDueDate, newLapseCount, newIsSuspended }\n\n    }\n\n    //logic\n    if (buttonClicked === \"Again\") {\n        return processAgainCard(flashcard, learningSteps)\n    }\n\n    else if (flashcard.phase === \"Graduated\") {\n        return processGraduatedCard(buttonClicked, flashcard, intervalModifier, easyBonus)\n    }\n\n    else {\n        return processLearningCard(buttonClicked, flashcard, learningSteps, graduatingInterval, easyInterval)\n    }\n}\n\nexport default processCard","import React from 'react'\nimport Flashcard from './Flashcard'\nimport Button from './Button'\nimport { useState, useEffect } from 'react'\nimport WORD_TYPES from '../Constants/WORD_TYPES'\nimport { Link } from 'react-router-dom'\nimport fetchData from '../Actions/FetchData'\nimport processFlashcards from '../Actions/ProcessFlashcards'\nimport generateParameterUrl from '../Actions/GenerateParameterUrl'\nimport processCard from '../Actions/ProcessCard'\n\nconst Flashcards = ({ currentDeck, setCurrentDeck, userProfile }) => {\n    const [isFinished, setIsFinished] = useState(false)\n    const [flashcards, setFlashcards] = useState(null)\n    const [showVerb, setShowVerb] = useState(false)\n    const [flashcard, setFlashcard] = useState([])\n    const [todaysCards, setTodaysCards] = useState([])\n    const [flashcardNumber, setFlashcardNumber] = useState(0)\n    const [learningSteps, setLearningSteps] = useState([])\n    const [learnAheadTime, setLearnAheadTime] = useState(null)\n\n    //set flashcards from current deck\n    useEffect(() => {\n        setFlashcards(currentDeck.flashcards)\n    }, [currentDeck.flashcards])\n\n    //get learn ahead time\n    useEffect(() => {\n        const currentTime = new Date()\n        const learnAheadTime = (new Date(currentTime.setMinutes(currentTime.getMinutes() + 20))).toJSON()\n        console.log(learnAheadTime)\n        setLearnAheadTime(learnAheadTime)\n    }, [])\n\n    //get learning steps\n    useEffect(() => {\n        const learningStepsString = userProfile.steps.split(\" \")\n        var i;\n        const learningSteps = []\n        for (i = 0; i < learningStepsString.length; i++) {\n            const learningStep = { stepNumber: i + 1, stepInterval: parseInt(learningStepsString[i]) }\n            learningSteps.push(learningStep)\n        }\n        setLearningSteps(learningSteps)\n    }, [userProfile.steps])\n\n    // get  todays flashcards\n    useEffect(() => {\n        if (flashcards) {\n            const currentTime = new Date()\n\n            const getCutoff = (phase, customTime) => {\n                var dateTo = new Date(currentTime.setMinutes(currentTime.getMinutes() + customTime))\n\n                if (phase === \"Graduated\") {\n                    dateTo = new Date(currentTime.setHours(customTime))\n                    if (currentTime.getHours() >= customTime) {\n                        dateTo = new Date(dateTo.setDate(dateTo.getDate() + 1))\n                    }\n                    dateTo = new Date(dateTo.setMinutes(0))\n                }\n                return dateTo.toJSON()\n            }\n\n            const filterCards = (cards, cardType, customTime, cardLimit = -1) => {\n                const dateTo = customTime ? getCutoff(cardType, customTime) : null\n                const filteredCards = cards.filter((card) =>\n                    card.phase === cardType\n                    && (card.dueDate <= dateTo || dateTo === null)\n                    && card.isSuspended === false)\n                    .slice(0, cardLimit)\n                return filteredCards\n\n            }\n            const reviewCards = filterCards(flashcards, \"Graduated\", 4, userProfile.reviewsPerDay)\n            const learningCards = filterCards(flashcards, \"Learning\", 20)\n            const newCards = filterCards(flashcards, \"New\", reviewCards.length > 0 ? 20 : null, userProfile.newCardsPerDay)\n\n            const todaysCardsFromServer = [...reviewCards, ...learningCards, ...newCards]\n\n            setTodaysCards(todaysCardsFromServer)\n            console.log(\"todayscards are: \")\n            console.log(todaysCardsFromServer)\n\n\n        }\n    }, [userProfile.newCardsPerDay, userProfile.reviewsPerDay, currentDeck.deckId, flashcards, isFinished])\n\n    //get next flashcard\n    useEffect(() => {\n        if (!isFinished && todaysCards.length > 0) {\n            console.log(\"effect was triggered to get flashcard\")\n            console.log(todaysCards)\n\n            const getFlashcard = async (currentFlashcard) => {\n                const flashcard = Object.assign({}, currentFlashcard)\n                flashcard.flashcardId = flashcard[WORD_TYPES[flashcard.wordType][\"id\"]]\n\n                const parameters = generateParameterUrl(currentDeck)\n\n                const url = `${flashcard.wordType}s/${flashcard.flashcardId}/phrases` + parameters\n                const { dataFromServer, error } = await fetchData(url)\n                if (error) {\n                    console.log(error)\n                }\n                else {\n                    const phraseFromServer = dataFromServer[Math.floor(Math.random() * dataFromServer.length)];\n                    if (phraseFromServer == null) {\n                        flashcard.phrase = \"no phrase for this word yet\"\n                        flashcard.phraseNumber = null\n                    }\n                    else {\n                        flashcard.spanishPhrase = phraseFromServer.spanishPhrase\n                        flashcard.englishPhrase = phraseFromServer.englishPhrase\n                        flashcard.phraseNumber = phraseFromServer.phraseNumber\n                        flashcard.word = phraseFromServer.word\n                        flashcard.startTime = phraseFromServer.startTime\n                        flashcard.endTime = phraseFromServer.endTime\n                        flashcard.subtitleId = phraseFromServer.subtitleId\n                        flashcard.conjugationForm = phraseFromServer.conjugationForm\n                        flashcard.conjugationTense = phraseFromServer.conjugationTense\n                        flashcard.conjugationType = phraseFromServer.conjugationType\n                        flashcard.showTitle = phraseFromServer.showTitle\n                        flashcard.seasonNumber = phraseFromServer.seasonNumber\n                        flashcard.episodeNumber = phraseFromServer.episodeNumber\n                    }\n                    setFlashcard(flashcard)\n                }\n            }\n            getFlashcard(todaysCards[flashcardNumber])\n\n        }\n    }, [currentDeck, todaysCards, flashcardNumber, isFinished])\n\n    const getPatchData = (updateData) => {\n        const patchData = []\n        for (let [key, value] of Object.entries(updateData)) {\n            if (value) {\n                patchData.push({ \"op\": \"replace\", \"path\": `/${key}`, \"value\": value })\n            }\n        }\n        return patchData;\n\n    }\n\n    const onClickButton = async (buttonClicked) => {\n\n        const options = {\n            learningSteps: learningSteps\n            , intervalModifier: userProfile.intervalModifier\n            , graduatingInterval: userProfile.graduatingInterval\n            , easyInterval: userProfile.easyInterval\n            , easyBonus: userProfile.easyBonus\n        }\n        console.log(options)\n\n        const { newEase, newPhase, newInterval, newLearningStep, newDueDate, newLapseCount, newIsSuspended } = processCard(buttonClicked, flashcard, options)\n        const updateData = { learningStep: newLearningStep, interval: newInterval, phase: newPhase, ease: newEase, dueDate: newDueDate, lapseCount: newLapseCount, isSuspended: newIsSuspended }\n        const patchData = getPatchData(updateData)\n\n        const url = `flashcards/${flashcard.wordType}s?id=${flashcard.flashcardId}&deckId=${currentDeck.deckId}`\n        const { dataFromServer: updatedCard, error } = await fetchData(url, 'PATCH', patchData)\n        if (error) {\n            console.log(error)\n        }\n        else {\n            const currentPhase = newPhase ? newPhase : flashcard.phase\n\n            if (currentPhase === \"Learning\" && newDueDate < learnAheadTime) {\n                todaysCards.push(updatedCard)\n            }\n            await onClick()\n        }\n    }\n\n    const onClick = async () => {\n        if (todaysCards.length > 0 && flashcardNumber + 1 !== todaysCards.length) {\n            setShowVerb(false)\n            setFlashcardNumber(flashcardNumber + 1)\n        }\n        else {\n            const { dataFromServer: updatedDeck, error } = await fetchData(`decks/${currentDeck.deckId}`)\n            if (error) {\n                console.log(error)\n            }\n            else {\n                updatedDeck.flashcards = processFlashcards(updatedDeck)\n                setCurrentDeck(updatedDeck)\n                setShowVerb(false)\n                setIsFinished(true)\n                setTodaysCards([])\n                setFlashcard([])\n            }\n        }\n    }\n\n    return (\n        <div>\n            {!isFinished && todaysCards.length === 0 && <>\n                <h1>No cards left for today, come back tomorrow</h1>\n            </>}\n\n            {!isFinished && flashcard && todaysCards.length > 0 && flashcard.spanishPhrase &&\n                <>\n                    {<Flashcard key={flashcard.phraseNumber} flashcard={flashcard} showVerb={showVerb} />}\n                    {!showVerb && <Button text=\"Show\" onClick={() => setShowVerb(true)} />}\n                    {showVerb &&\n                        <div>\n                            <Button text=\"Again\" onClick={() => onClickButton(\"Again\")} />\n                            {flashcard.phase === \"Graduated\" && <Button text=\"Hard\" onClick={() => onClickButton(\"Hard\")} />}\n                            <Button text=\"Good\" onClick={() => onClickButton(\"Good\")} />\n                            <Button text=\"Easy\" onClick={() => onClickButton(\"Easy\")} />\n                        </div>}\n                </>}\n            {isFinished &&\n                <>\n                    <h1>Deck finished!</h1>\n                    <h2>Come back tomorrow for more flashcards</h2>\n                </>}\n            <Link to=\"/home\" className=\"back-link\">Back</Link>\n        </div>\n    )\n}\n\nexport default Flashcards\n","const CurrentDeck = ({ currentDeck }) => {\n\n    return (\n            currentDeck.flashcards &&\n            <div className=\"m-5 w-1/3 rounded-lg shadow-lg bg-white border-2 \">\n                    <header className=\"flex justify-center p-4\">\n                        <h2 className=\"text-5xl \">{currentDeck.name}</h2>\n                    </header>\n\n                <div className=\"flex justify-evenly p-4\">\n                <div>\n                    <h4 className=\"text-3xl\">Cards</h4>\n                    <h4 className=\"text-xl text-terraCotta-500 text-center\">{currentDeck.flashcards.length}</h4>\n                </div>\n                <div>\n                    <h4 className=\"text-3xl\">Due</h4>\n                    <h4 className=\"text-xl text-terraCotta-500 text-center\">{currentDeck.flashcards.filter((flashcard) => flashcard.dueDate <= new Date().toJSON()).length}</h4>\n                </div>\n                </div>\n            </div>\n    )\n}\n\nexport default CurrentDeck\n","import fetchData from './FetchData'\nimport WORD_TYPES from '../Constants/WORD_TYPES'\n\nconst updateFlashcards = async (currentDeck, updatedFlashcards) => {\n\n    const addFlashcards = async (flashcardsToAdd, flashcardsToRemove, deckId) => {\n        var i = 0;\n        for (i = 0; i < flashcardsToRemove.length; i++) {\n            const flashcard = flashcardsToRemove[i]\n            const id = WORD_TYPES[flashcard.wordType][\"id\"]\n\n            await fetchData(`Flashcards/${flashcard.wordType}s?id=${flashcard[id]}&deckId=${deckId}`, 'DELETE')\n        }\n\n        const patchData = []\n        var j = 0;\n        console.log(flashcardsToAdd.length)\n        for (j = 0; j < flashcardsToAdd.length; j++) {\n            const flashcard = flashcardsToAdd[j]\n            console.log(flashcard)\n            const wordType = flashcard[\"wordType\"]\n            console.log(wordType)\n            const id = [WORD_TYPES[wordType][\"id\"]]\n            console.log(WORD_TYPES[wordType])\n            const event = new Date();\n            const jsonDate = event.toJSON();\n            const addData = { deckId, Phase: \"New\", ease: 250, learningStep: 1, interval: 0, dueDate: jsonDate }\n\n            addData[id] = flashcard[id]\n            patchData.push({ \"op\": \"add\", \"path\": `/${wordType}Flashcards/-`, \"value\": addData })\n        }\n        console.log(\"patchData\")\n        console.log(JSON.stringify(patchData))\n        const res = await fetchData(`decks/${deckId}`, 'PATCH', patchData)\n        return res;\n\n\n\n\n\n    }\n    const currentFlashcards = currentDeck.flashcards\n    console.log(\"current cards\")\n    console.log(currentFlashcards)\n    console.log(\"updated cards\")\n    console.log(updatedFlashcards)\n    const flashcardsToAdd = updatedFlashcards.filter((flashcard) => !currentFlashcards.some(\n        x => (x.wordType === flashcard.wordType && x[`${x.wordType}Id`] === flashcard[`${flashcard.wordType}Id`])))\n    console.log(\"add\")\n    console.log(flashcardsToAdd)\n\n    const flashcardsToRemove = currentFlashcards.filter((currentFlashcard) => !updatedFlashcards.some(\n        x => (x.wordType === currentFlashcard.wordType && x[`${x.wordType}Id`] === currentFlashcard[`${currentFlashcard.wordType}Id`])))\n    console.log(\"remove\")\n    console.log(flashcardsToRemove)\n\n\n    const { dataFromServer, error } = await addFlashcards(flashcardsToAdd, flashcardsToRemove, currentDeck.deckId)\n\n    return { dataFromServer, error }\n}\n\nexport default updateFlashcards;\n\n","import { useTable } from 'react-table'\n\nconst TestTable = ({columns, data}) => {\n\n      const tableInstance = useTable({ columns, data })\n\n      const {\n\n        getTableProps,\n     \n        getTableBodyProps,\n     \n        headerGroups,\n     \n        rows,\n     \n        prepareRow,\n     \n      } = tableInstance\n\n\n\n    return (\n        <table {...getTableProps()}>\n\n     <thead>\n\n       {// Loop over the header rows\n\n       headerGroups.map(headerGroup => (\n\n         // Apply the header row props\n\n         <tr {...headerGroup.getHeaderGroupProps()}>\n\n           {// Loop over the headers in each row\n\n           headerGroup.headers.map(column => (\n\n             // Apply the header cell props\n\n             <th {...column.getHeaderProps()}>\n\n               {// Render the header\n\n               column.render('Header')}\n\n             </th>\n\n           ))}\n\n         </tr>\n\n       ))}\n\n     </thead>\n\n     {/* Apply the table body props */}\n\n     <tbody {...getTableBodyProps()}>\n\n       {// Loop over the table rows\n\n       rows.map(row => {\n\n         // Prepare the row for display\n\n         prepareRow(row)\n\n         return (\n\n           // Apply the row props\n\n           <tr {...row.getRowProps()}>\n\n             {// Loop over the rows cells\n\n             row.cells.map(cell => {\n\n               // Apply the cell props\n\n               return (\n\n                 <td {...cell.getCellProps()}>\n\n                   {// Render the cell contents\n\n                   cell.render('Cell')}\n\n                 </td>\n\n               )\n\n             })}\n\n           </tr>\n\n         )\n\n       })}\n\n     </tbody>\n\n   </table>\n    )\n}\n\nexport default TestTable\n\n\n\n  ","import Button from '../Button'\nimport { useState, useEffect } from 'react'\n// import Words from './Words'\n// import CurrentFlashcards from './CurrentFlashcards'\nimport updateFlashcards from '../../Actions/UpdateFlashcards'\nimport fetchData from '../../Actions/FetchData'\nimport processFlashcards from '../../Actions/ProcessFlashcards'\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { Link } from 'react-router-dom'\nimport GenerateButtons from '../../Actions/GenerateButtons'\nimport TestTable from '../TestTable'\n\n\nconst AddFlashcards = ({ currentDeck, setCurrentDeck, decks, setDecks }) => {\n    const [searchString, setSearchString] = useState('');\n    const [searchResult, setSearchResult] = useState([]);\n    const [showResult, setShowResult] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [flashcardsInDeck, setFlashcardsInDeck] = useState(null)\n    const [filterString, setFilterString] = useState('')\n    const [cardsToSuspend, setCardsToSuspend] = useState([])\n\n    useEffect(() => {\n        if (currentDeck.flashcards) {\n            const currentFlashcards = [...currentDeck.flashcards]\n            setFlashcardsInDeck(currentFlashcards)\n        }\n\n    }, [currentDeck.flashcards])\n\n    useEffect(() => {\n        if (searchResult.length > 0) {\n            setIsLoading(false)\n            setShowResult(true)\n        }\n    }, [searchResult])\n\n\n    const onSubmitSearch = async (e) => {\n        e.preventDefault()\n\n        setSearchResult([])\n        if (searchString === null | searchString.length === 0) {\n            alert(\"please add a search value\")\n            return\n        }\n        setIsLoading(true)\n        const { dataFromServer, error } = await fetchData(`words?word=${searchString}`)\n        if (error) {\n            console.log(error)\n        }\n        else {\n            var i;\n            for(i=0;i<dataFromServer.length;i++) {\n                dataFromServer[i].flashcardId = dataFromServer[i][`${dataFromServer[i].wordType}Id`]\n\n            }\n            setSearchResult(dataFromServer)\n            console.log(\"search result\")\n            console.log(searchResult)\n        }\n    }\n\n\n    const onClickSubmit = async () => {\n        const clickYes = async () => {\n            console.log(\"clicked yes\")\n            const { dataFromServer, error } = await updateFlashcards(currentDeck, flashcardsInDeck)\n            if (error) {\n                console.log(error)\n            }\n            else {\n\n                dataFromServer.flashcards = processFlashcards(dataFromServer)\n                const newDecks = decks.filter((deck) => deck.deckId !== currentDeck.deckId)\n                setDecks([...newDecks, dataFromServer])\n                setCurrentDeck(dataFromServer)\n            }\n        }\n\n        const clickNo = () => {\n            return\n        }\n\n\n\n        confirmAlert({\n            title: 'Confirm',\n            message: 'Are you sure? Progress will be lost for any removed words',\n            buttons: [\n                {\n                    label: 'Yes',\n                    onClick: () => clickYes()\n                },\n                {\n                    label: 'No',\n                    onClick: () => clickNo()\n                }\n            ]\n        });\n    }\n\n\n\n    const onClickSuspend = async (flashcard) => {\n        \n\n        const changeCardSuspension = async (flashcard) => {\n            const flashcardId = flashcard[`${flashcard.wordType}Id`]\n            const url = `flashcards/${flashcard.wordType}s?id=${flashcardId}&deckId=${currentDeck.deckId}`\n            const patchData = [{ \"op\": \"replace\", \"path\": `/isSuspended`, \"value\": !flashcard.isSuspended }]\n            const { error } = await fetchData(url,'PATCH',patchData)\n            \n            return { error }\n            }\n        \n\n        const clickYes = async () => {\n            changeCardSuspension(flashcard)\n            const objIndex = flashcardsInDeck.findIndex((card => card.word === flashcard.word && card.wordType === flashcard.wordType));\n            flashcardsInDeck[objIndex].isSuspended = !flashcardsInDeck[objIndex].isSuspended\n            console.log(flashcardsInDeck)\n            setFlashcardsInDeck([...flashcardsInDeck])\n            }\n\n        const clickNo = () => {\n            return\n        }\n\n        confirmAlert({\n            title: 'Confirm',\n            message: flashcard.isSuspended ? 'Unsuspend card?' : 'Are you sure you want to suspend this card? you can unsuspend it at any time.',\n            buttons: [\n                {\n                    label: 'Yes',\n                    onClick: () => clickYes()\n                },\n                {\n                    label: 'No',\n                    onClick: () => clickNo()\n                }\n            ]\n        });\n    }\n\n    const onClickAdd = (flashcard) => {\n        flashcard[`${flashcard.wordType}Id`] = flashcard.flashcardId\n        flashcard.isSuspended = false\n        setFlashcardsInDeck([...flashcardsInDeck, flashcard])\n        console.log(flashcardsInDeck)\n}\n\n    const searchResultsColumns =  [\n          {\n            Header: 'Word',\n            accessor: 'word', // accessor is the \"key\" in the data\n            Cell: ({value}) => (<span className=\"text-center font-semibold text-2xl p-2\">{value}</span>)\n          },\n          {\n            Header: 'Type',\n            accessor: 'wordType',\n            Cell: ({value}) => (<span className=\"text-center text-xl p-2\">{value}</span>)\n          },\n          {\n            id: `flashcardId`,\n            accessor:'flashcardId',\n            Cell: ({row}) => (<button className=\"btn\" onClick={\n                flashcardsInDeck.some(card => card[`${card.wordType}Id`] === row.values.flashcardId) ? null :\n                () => onClickAdd({flashcardId:row.values.flashcardId, wordType:row.values.wordType,word:row.values.word})}>\n                {flashcardsInDeck.some(card => card[`${card.wordType}Id`] === row.values.flashcardId) ? \"Added\" : \"Add\"}\n            </button>)\n          },\n        ]\n    \n        const CurrentFlashcardsColumns =  [\n            {\n              Header: 'Word',\n              accessor: 'word', // accessor is the \"key\" in the data\n              Cell: ({row, value}) => (<span className={row.original.isSuspended ? \"text-red-700 text-center font-semibold text-2xl p-2\" : \"text-center font-semibold text-2xl p-2\"}>{value}</span>)\n            },\n            {\n              Header: 'Type',\n              accessor: 'wordType',\n              Cell: ({row, value}) => (<span className='text-center text-xl p-2'>{value}</span>)\n            },\n            {\n                id: 'suspend',\n                accessor: 'isSuspended',\n                Cell: ({row}) => (<button className=\"btn\" onClick={!row.original.phase ? null :() => onClickSuspend(row.original)}>\n                    {!row.original.phase ? \"Can't suspend new card\" : flashcardsInDeck.find(card => card.word === row.original.word && card.wordType === row.original.wordType).isSuspended ? \"Suspended\" : \"Suspend\"}</button>)\n              },\n            {\n              id: `flashcardId`,\n              accessor:'flashcardId',\n              Cell: ({row}) => (<button className=\"btn\" onClick={\n                  () => setFlashcardsInDeck(flashcardsInDeck.filter(x => !(x.word === row.values.word && x.wordType === row.values.wordType)))}>\n              Remove</button>)\n            },\n          ]\n\n    return (\n        <>\n            <section className=\"px-32 py-6\">\n            <header>\n                <h4 className=\"p-2 border-b-2 border-bookBlue text-bold text-5xl\">Editing: {currentDeck.name}</h4>\n            </header>\n                <div className=\"flex justify-evenly shadow-md\">\n                    <div className=\"w-1/2 bg-gray-100 shadow-md p-4\">\n                        <h2 className=\"text-4xl p-4\" >Add cards</h2>\n                        \n                        <form className='p-4' onSubmit={onSubmitSearch}>\n                            <div className='flex justify-center bg-gray-100'>\n                                <input\n                                    type='text'\n                                    placeholder='Search'\n                                    value={searchString}\n                                    onChange={(e) => setSearchString(e.target.value)}\n                                />\n                            </div>\n                            <div className=\"p-2 flex justify-center\">\n                            <input type='submit' value='Search' className='btn' />\n                            </div>\n                            \n                        </form>\n                        {isLoading && <h1>Loading....</h1>}\n                        <div className=\"h-80 flex justify-center bg-white overflow-scroll\">\n                        {showResult && <TestTable columns={searchResultsColumns} data={searchResult} />}\n                        </div>\n                        {/* {showResult && <Table tableData={getTableButtons(searchResult, flashcardsInDeck)} headers={[{ columnName: 'word', objectProperty: 'word' }, { columnName: \"Type\", objectProperty: \"wordType\" }, { columnName: \"delete\", objectProperty: \"button\" }]} />} */}\n                    </div>\n\n                    <div className=\"w-1/2 bg-gray-100 shadow-md p-4\">\n                        <h2 className=\"text-4xl p-4\">Current cards</h2>\n                        <div className='flex justify-center bg-gray-100'>\n                            <input type=\"text\" id=\"myInput\" onChange={(e) => setFilterString(e.target.value.toLowerCase())} value={filterString} placeholder=\"Search deck...\">\n                            </input>\n                        </div>\n                        <div className='p-6 flex justify-center'>\n                        <input type='submit' value='Search' className='btn btn-block' />\n                        </div>\n                        {currentDeck.flashcards.length === 0 && <h3>Deck is empty</h3>}\n                        <div className=\"flex justify-center bg-white overflow-scroll h-80\">\n                            {flashcardsInDeck && cardsToSuspend && <TestTable columns={CurrentFlashcardsColumns} data={flashcardsInDeck} />}\n                            {/* {flashcardsInDeck && <Table tableData={getTableButtons(flashcardsInDeck)} headers={[{ columnName: 'word', objectProperty: 'word' }, { columnName: \"Type\", objectProperty: \"wordType\" }, { columnName: \"delete\", objectProperty: \"button\" }]} />} */}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"flex justify-center p-4\">\n                    <Link className=\"btn\" to=\"/home\">Back</Link>\n                    <Button className=\"btn border-2 border-terraCotta-500\" text=\"Submit\" color=\"black\" onClick={() => onClickSubmit()} />\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport default AddFlashcards\n","import { useState } from 'react'\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport initialDeckSettings from '../../Constants/DEFAULT_DECK_SETTINGS'\nimport { Link } from 'react-router-dom'\n\nconst DeckForm = ({ deck=initialDeckSettings\n, processDeck, onClickBack , headerText}) => {\n  const [name, setName] = useState(deck.name)\n  const [useSubjunctive, setUseSubjunctive] = useState(deck.useSubjunctive)\n  const [useIndicative, setUseIndicative] = useState(deck.useIndicative)\n  const [useImperative, setUseImperative] = useState(deck.useImperative)\n  const [useParticiple, setUseParticiple] = useState(deck.useParticiple)\n  const [usePreterite, setUsePreterite] = useState(deck.usePreterite)\n  const [useImperfect, setUseImperfect] = useState(deck.useImperfect)\n  const [useFuture, setUseFuture] = useState(deck.useFuture)\n  const [usePresent, setUsePresent] = useState(deck.usePresent)\n  const [isDefault, setIsDefault] = useState(deck.IsDefault)\n  const [useInfinitive, setUseInfinitive] = useState(deck.useInfinitive);\n  const [useYo, setUseYo] = useState(deck.useYo);\n  const [useTu, setUseTu] = useState(deck.useTu);\n  const [useEl, setUseEl] = useState(deck.useEl);\n  const [useVos, setUseVos] = useState(deck.useVos);\n  const [useEllos, setUseEllos] = useState(deck.useEllos);\n  const [useNosotros, setUseNosotros] = useState(deck.useNosotros);\n  const [useVosotros, setUseVosotros] = useState(deck.useVosotros);\n\n  const onSubmit = (e) => {\n    e.preventDefault()\n\n    const clickYes = () => {\n      processDeck({\n        name, useSubjunctive, useInfinitive, useIndicative, useImperative, useParticiple, usePreterite, useImperfect, useFuture, usePresent,\n        useYo, useTu, useEl, useVos, useEllos, useNosotros, useVosotros\n      })\n    }\n\n    const clickNo = () => {\n      return\n    }\n\n    confirmAlert({\n      title: 'Confirm',\n      message: 'Confirm settings?',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => clickYes()\n        },\n        {\n          label: 'No',\n          onClick: () => clickNo()\n        }\n      ]\n    });\n\n  }\n\n\n  return (\n    <>\n    <header>\n          <h4>{headerText}</h4>\n    </header>\n      <form className='add-form' onSubmit={onSubmit}>\n        <fieldset className=\"fieldset-container default-deck\">\n          <div className='form-control'>\n            <label>Deck name</label>\n            <input\n              type='text'\n              placeholder={deck.name ? deck.name : 'My first deck'}\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </div>\n          <div className='form-control form-control-check default-deck'>\n              <label className=\"center\">Default deck</label>\n              <input\n                type='checkbox'\n                checked={isDefault}\n                value={isDefault}\n                onChange={(e) => setIsDefault(e.currentTarget.checked)}\n              />\n            </div>\n        </fieldset>\n        <div className=\"center\">\n          <h4>Verb settings</h4>\n        </div>\n        <p>You can customise the type of verb conjugations you will see below. Make sure that the forms and tenses are compatible (for example if you only tick subjunctive and preterite, nothing will come up as subjunctive has no preterite form).</p>\n        <div className=\"fieldset-container\">\n          <fieldset className=\"deck-fieldset\">\n            <legend>Forms:</legend>\n            <div>\n              <div className='form-control form-control-check'>\n                <label>Infinitive</label>\n                <input\n                  type='checkbox'\n                  checked={useInfinitive}\n                  value={useInfinitive}\n                  onChange={(e) => setUseInfinitive(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Subjunctive</label>\n                <input\n                  type='checkbox'\n                  checked={useSubjunctive}\n                  value={useSubjunctive}\n                  onChange={(e) => setUseSubjunctive(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Indicative</label>\n                <input\n                  type='checkbox'\n                  checked={useIndicative}\n                  value={useIndicative}\n                  onChange={(e) => setUseIndicative(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Imperative</label>\n                <input\n                  type='checkbox'\n                  checked={useImperative}\n                  value={useImperative}\n                  onChange={(e) => setUseImperative(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Participle</label>\n                <input\n                  type='checkbox'\n                  checked={useParticiple}\n                  value={useParticiple}\n                  onChange={(e) => setUseParticiple(e.currentTarget.checked)}\n                />\n              </div>\n            </div>\n          </fieldset>\n          <fieldset className=\"deck-fieldset\">\n            <legend>Tenses:</legend>\n            <div>\n              <div className='form-control form-control-check'>\n                <label>Preterite</label>\n                <input\n                  type='checkbox'\n                  checked={usePreterite}\n                  value={usePreterite}\n                  onChange={(e) => setUsePreterite(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Imperfect</label>\n                <input\n                  type='checkbox'\n                  checked={useImperfect}\n                  value={useImperfect}\n                  onChange={(e) => setUseImperfect(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Future</label>\n                <input\n                  type='checkbox'\n                  checked={useFuture}\n                  value={useFuture}\n                  onChange={(e) => setUseFuture(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Present</label>\n                <input\n                  type='checkbox'\n                  checked={usePresent}\n                  value={usePresent}\n                  onChange={(e) => setUsePresent(e.currentTarget.checked)}\n                />\n              </div>\n            </div>\n          </fieldset>\n          <fieldset className=\"deck-fieldset\">\n            <legend>Conjugations:</legend>\n            <div>\n              <div className='form-control form-control-check'>\n                <label>Yo</label>\n                <input\n                  type='checkbox'\n                  checked={useYo}\n                  value={useYo}\n                  onChange={(e) => setUseYo(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Tú</label>\n                <input\n                  type='checkbox'\n                  checked={useTu}\n                  value={useTu}\n                  onChange={(e) => setUseTu(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Vos</label>\n                <input\n                  type='checkbox'\n                  checked={useVos}\n                  value={useVos}\n                  onChange={(e) => setUseVos(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Él/Ella/Usted</label>\n                <input\n                  type='checkbox'\n                  checked={useEl}\n                  value={useEl}\n                  onChange={(e) => setUseEl(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Ellos/Ellas/Ustedes</label>\n                <input\n                  type='checkbox'\n                  checked={useEllos}\n                  value={useEllos}\n                  onChange={(e) => setUseEllos(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Nosotros/Nosotras</label>\n                <input\n                  type='checkbox'\n                  checked={useNosotros}\n                  value={useNosotros}\n                  onChange={(e) => setUseNosotros(e.currentTarget.checked)}\n                />\n              </div>\n              <div className='form-control form-control-check'>\n                <label>Vosotros/Vosotras</label>\n                <input\n                  type='checkbox'\n                  checked={useVosotros}\n                  value={useVosotros}\n                  onChange={(e) => setUseVosotros(e.currentTarget.checked)}\n                />\n              </div>\n\n            </div>\n          </fieldset>\n        </div>\n        <div className=\"center\">\n          <Link to=\"/home\" className=\"back-link\">Back</Link>\n          <input type='submit' value='Save Deck' className='btn btn-block' />\n        </div>\n      </form>\n    </>\n  )\n}\n\nexport default DeckForm\n","import CurrentDeck from './CurrentDeck'\nimport AddFlashcards from './AddFlashcards'\nimport DeckForm from './DeckForm'\nimport processFlashcards from '../../Actions/ProcessFlashcards'\nimport fetchData from '../../Actions/FetchData'\nimport { useEffect } from 'react'\nimport './deck.css'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\n\nconst DeckSection = ({ currentDeck, decks, setCurrentDeck, setDecks }) => {\n\n    useEffect(() => {\n        console.log(currentDeck)\n    },[currentDeck])\n\n    const updateDeck = async (updatedDeck) => {\n        const patchData = []\n        for (const [key, value] of Object.entries(updatedDeck)) {\n            patchData.push({ \"op\": \"replace\", \"path\": \"/\" + key, \"value\": value })\n        }\n\n        const { dataFromServer, error } = await fetchData(`decks/${currentDeck.deckId}`, 'PATCH', patchData)\n        if (error) {\n            console.log(error)\n        }\n        else {\n            dataFromServer.flashcards = processFlashcards(dataFromServer)\n            setCurrentDeck(dataFromServer)\n        }\n\n    }\n\n    return (\n        <Router>\n\n            <article className=\"px-16 py-2\">\n                    \n                    \n                    <Route path=\"/home\" exact>\n                    <header>\n                        <h4 className=\"p-2 border-b-2 border-bookBlue text-bold text-3xl\">Current deck</h4>\n                    </header>\n                    <div className= \"flex justify-center\">\n                        <CurrentDeck currentDeck={currentDeck}/>\n                    </div>\n                        <div className=\"flex justify-center text-center text-2xl\">\n                            <div  className=\"w-1/3  flex justify-center text-center\">\n                            <Link className=\"btn border-2 shadow-md transition-colors duration-75 border-terraCotta-500 hover:text-white hover:bg-terraCotta-500 hover:shadow-inner\" to=\"/deck/addFlashcards\">Add/remove cards</Link>\n                            <Link className=\"btn border-2 shadow-md transition-colors duration-75 border-terraCotta-500 hover:text-white hover:bg-terraCotta-500 hover:shadow-inner ml-2\" to=\"/deck/edit\">Edit settings</Link>\n                            </div>\n                        </div>\n                    </Route>\n                    \n\n                    <Route path=\"/deck/addFlashcards\" exact>\n                        {currentDeck.flashcards && <AddFlashcards currentDeck={currentDeck} setCurrentDeck={setCurrentDeck} decks={decks} setDecks={setDecks} />}\n                    </Route>\n\n\n                    <Route path=\"/deck/edit\" exact>\n                        <div className=\"container blue-border\">\n                            <DeckForm deck={currentDeck} processDeck={updateDeck} headerText=\"Edit deck:\" />\n                        </div>\n                    </Route>\n\n            </article>\n        </Router>\n    )\n}\n\nexport default DeckSection\n","import { useState, useEffect } from 'react'\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport fetchData from './FetchData'\n\nconst useFetch = (url, updatedData, resource) => {\n    const [isPending, setIsPending] = useState(true)\n    const [data, setData] = useState([])\n    const [error, setError] = useState(null)\n    const { user, isAuthenticated } = useAuth0();\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            console.log(\"are we fetching ?\")\n            if (updatedData) {\n                const updateData = async () => {\n                    setIsPending(true)\n                    const patchData = []\n                    for (const [key, value] of Object.entries(updatedData)) {\n                        patchData.push({ \"op\": \"replace\", \"path\": \"/\" + key, \"value\": value })\n                    }\n                    console.log(`${resource}s/`)\n                    const { dataFromServer, error } = await fetchData(`${resource}s/${updatedData[`${resource}Id`]}`, 'PATCH', patchData)\n                    setError(error)\n                    setData(dataFromServer)\n                    setIsPending(false)\n                }\n                updateData()\n            }\n\n\n            else {\n                const getData = async () => {\n                    setIsPending(true)\n                    if (url === `users?authIdentifier=`) {\n                        const authIdentifier = user.sub\n                        //user.sub\n                        console.log(\"here\")\n                        const { dataFromServer, error } = await fetchData(url + authIdentifier);\n                        if (dataFromServer.status === 404) {\n                            const { dataFromServer, error } = await fetchData('users', 'POST', { authIdentifier })\n                            setError(error)\n                            setData(dataFromServer)\n                            setIsPending(false)\n\n                        }\n                        else {\n                            setError(error)\n                            setData(dataFromServer)\n                            setIsPending(false)\n                        }\n\n                    }\n                    else {\n                        const { dataFromServer, error } = await fetchData(url);\n                        setError(error)\n                        setData(dataFromServer)\n                        setIsPending(false)\n                    }\n                }\n                getData()\n            }\n        }\n    }, [url, user, isAuthenticated, updatedData, resource]);\n\n    return { data, isPending, error };\n}\n\nexport default useFetch;","import { useState } from 'react'\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { Link } from 'react-router-dom'\n\nconst ChangeUserSettings = ({userProfile, setUpdatedUserProfile}) => {\n            const [displayName, setDisplayName] = useState(userProfile.displayName)\n            const [defaultDeckId, setDefaultDeckId] = useState(userProfile.defaultDeckId ? userProfile.defaultDeckId : undefined)\n            const [newCardsPerDay, setNewCardsPerDay] = useState(userProfile.newCardsPerDay)\n            const [graduatingInterval, setGraduatingInterval] = useState(userProfile.graduatingInterval)\n            const [easyInterval, setEasyInterval] = useState(userProfile.easyInterval)\n            const [startingEase, setStartingEase] = useState(userProfile.startingEase)\n            const [steps, setSteps] = useState(userProfile.steps)\n            const [reviewsPerDay, setReviewsPerDay] = useState(userProfile.reviewsPerDay)\n            const [easyBonus, setEasyBonus] = useState(userProfile.easyBonus)\n            const [intervalModifier, setIntervalModifier] = useState(userProfile.intervalModifier);\n            const [maximumInterval, setMaximumInterval] = useState(userProfile.maximumInterval);\n\n            const onSubmit = (e) => {\n              e.preventDefault()\n          \n              const clickYes = () => {\n                const userId = userProfile.userId\n                  const updatedUser = { userId,\n                    displayName, defaultDeckId, newCardsPerDay, graduatingInterval, easyInterval, startingEase, steps, reviewsPerDay, easyBonus, intervalModifier,\n                    maximumInterval\n                }\n                console.log(updatedUser)\n                setUpdatedUserProfile(updatedUser)\n              }\n          \n              const clickNo = () => {\n                return\n              }\n          \n              confirmAlert({\n                title: 'Confirm',\n                message: 'Confirm settings?',\n                buttons: [\n                  {\n                    label: 'Yes',\n                    onClick: () => clickYes()\n                  },\n                  {\n                    label: 'No',\n                    onClick: () => clickNo()\n                  }\n                ]\n              });\n          \n            }\n          \n            return (\n              <>\n              <header>\n                    <h4>Edit user settings:</h4>\n              </header>\n                <form className='add-form' onSubmit={onSubmit}>\n                  <fieldset className=\"fieldset-container default-deck\">\n                    <div className='form-control'>\n                      <label>Display name</label>\n                      <input\n                        type='text'\n                        placeholder={displayName ? displayName : ''}\n                        value={displayName ? displayName : ''}\n                        onChange={(e) => setDisplayName(e.target.value)}\n                      />\n                    </div>\n                    <div className='form-control form-control-check default-deck'>\n                        <label className=\"center\">Default deck</label>\n                        <select value={defaultDeckId} onChange={(e) => setDefaultDeckId(e.target.value)}>\n                            {userProfile.decks.map((deck) => (\n                                <option key={deck.deckId} value={deck.deckId}>{deck.name}</option>\n                            ))}\n                        </select>\n                      </div>\n                  </fieldset>\n                  <div className=\"center\">\n          <h4>Flashcard options</h4>\n        </div>\n        <p>Here you can customize how your flashcards work. ONLY CHANGE THESE IF YOU KNOW WHAT YOU ARE DOING. </p>\n                  <div className=\"fieldset-container\">\n          <fieldset className=\"deck-fieldset\">\n            <legend>New cards:</legend>\n            <div>\n                <div className='form-control form-control'>\n                <label>Steps</label>\n                <input\n                  type='text'\n                  placeholder={steps}\n                  value={steps}\n                  onChange={(e) => setSteps(e.currentTarget.value)}\n                />\n              </div>\n\n              <div className='form-control form-control'>\n                <label>Max new cards per day</label>\n                <input\n                  type='number'\n                  placeholder={newCardsPerDay}\n                  value={newCardsPerDay}\n                  onChange={(e) => setNewCardsPerDay(e.currentTarget.value)}\n                />\n              </div>\n              <div className='form-control form-control'>\n                <label>Graduating interval (days)</label>\n                <input\n                  type='number'\n                  value={graduatingInterval}\n                  onChange={(e) => setGraduatingInterval(e.currentTarget.value)}\n                />\n              </div>\n              <div className='form-control form-control'>\n                <label>Easy interval (days)</label>\n                <input\n                  type='number'\n                  value={easyInterval}\n                  onChange={(e) => setEasyInterval(e.currentTarget.value)}\n                />\n              </div>\n\n              <div className='form-control form-control'>\n                <label>Starting ease (%)</label>\n                <input\n                  type='number'\n                  value={startingEase}\n                  onChange={(e) => setStartingEase(e.currentTarget.value)}\n                />\n              </div>\n            </div>\n          </fieldset>\n          <fieldset className=\"deck-fieldset\">\n            <legend>Review Cards:</legend>\n            <div>\n            <div className='form-control form-control'>\n                <label>Maximum reviews per day</label>\n                <input\n                  type='number'\n                  value={reviewsPerDay}\n                  onChange={(e) => setReviewsPerDay(e.currentTarget.value)}\n                />\n              </div>\n\n              <div className='form-control form-control'>\n                <label>Easy bonus (%)</label>\n                <input\n                  type='number'\n                  value={easyBonus}\n                  onChange={(e) => setEasyBonus(e.currentTarget.value)}\n                />\n              </div>\n\n              <div className='form-control form-control'>\n                <label>Interval modifier (%)</label>\n                <input\n                  type='number'\n                  value={intervalModifier}\n                  onChange={(e) => setIntervalModifier(e.currentTarget.value)}\n                />\n              </div>\n\n              <div className='form-control form-control'>\n                <label>Maximum interval</label>\n                <input\n                  type='number'\n                  value={maximumInterval}\n                  onChange={(e) => setMaximumInterval(e.currentTarget.value)}\n                />\n              </div>\n              \n            </div>\n          </fieldset>\n        </div>\n\n                  <div className=\"center\">\n                    <Link to=\"/home\" className=\"back-link\">Back</Link>\n                    <input type='submit' value='Save settings' className='btn btn-block' />\n                  </div>\n                </form>\n              </>\n            )\n\n}\n\nexport default ChangeUserSettings\n","\nconst TableItem = ({ tableItem, headers }) => {\n\n    return (\n            headers.map((header, index) => (\n                        <td key={index}>{tableItem[header.objectProperty]}</td>\n                        ))\n    )\n}\nexport default TableItem","import React from 'react'\nimport TableItem from './TableItem'\nimport PropTypes from 'prop-types'\n\nconst Table = ({ tableData, className , headers, showHeaders }) => {\n    return (\n            <table className={className}>\n                <tbody>\n                    {showHeaders && headers.length > 0 && \n                        <tr>\n                        {headers.map((header, index) => (\n                            header.columnName && <th key={index}>{header.columnName}</th>\n                        ))}\n                        </tr>}\n\n                    {tableData.map((tableItem, index) => (\n                        <tr>\n                        <TableItem key={index} headers={headers} tableItem={tableItem}/>\n                        </tr>\n                ))}\n            </tbody>\n            </table>\n    )\n    \n}\n\nTable.defaultProps = {\n    className: '',\n    headers:[],\n    showHeaders:true\n}\n\nTable.propTypes = {\n    className: PropTypes.string,\n    headers: PropTypes.array,\n    showHeaders: PropTypes.bool\n}\n\nexport default Table","import processFlashcards from './ProcessFlashcards'\nimport Button from '../components/Button'\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\nconst getDecksData = (decks, currentDeck, setCurrentDeck, deleteDeck) => {\n\n    const onClickDelete =  (deck) => {\n        confirmAlert({\n            title: `Delete: ${deck.name}`,\n            message: `Are you sure you want to delete the deck ${deck.name}? this cannot be undone`,\n            buttons: [\n              {\n                label: 'Yes',\n                onClick: () => deleteDeck(deck.deckId)\n              },\n              {\n                label: 'No',\n                onClick: () => null\n              }\n            ]\n          });\n    }\n\n    \n    var i;\n    const processedData = [];\n\n    for(i=0;i<decks.length;i++) {\n          const deck = decks[i]\n          deck.flashcards = processFlashcards(deck)\n          const deckCopy = Object.create(deck)\n\n          if(currentDeck.deckId === deck.deckId) {\n             deck.select = <button className=\"td-click\" onClick={null}>{deck.name}<em> (Selected)</em></button>\n          }\n          else {\n                deck.select = <button className=\"td-click\" onClick={() => setCurrentDeck(deckCopy)}>{deck.name}</button>\n          }\n          \n          deck.select = <button className=\"td-click\" onClick={currentDeck.deckId === deck.deckId ? null : () => setCurrentDeck(deckCopy)}>{currentDeck.deckId === deck.deckId ? <>{deck.name}<em> (Selected)</em></>: deck.name}</button>\n          deck.wordCount = deck.flashcards.length\n          deck.dueCount = deck.flashcards.filter((flashcard) => flashcard.dueDate <= new Date().toJSON()).length\n\n          deck.deleteButton = \n                <Button className=\"btn minimal\" text=\"Delete\" color=\"#85144b\" onClick={() => onClickDelete(deck)}/>\n          processedData.push(deck)\n        }\n\n    return processedData\n}\n\nexport default getDecksData","import { useState, useEffect, useCallback } from 'react'\nimport { BrowserRouter as Router, Route, NavLink, Redirect, Link } from 'react-router-dom'\nimport Header from './components/Header/Header'\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport Welcome from './components/Welcome'\nimport Flashcards from './components/Flashcards'\nimport DeckSection from './components/DeckSection/DeckSection'\nimport useFetch from './Actions/UseFetch';\nimport processFlashcards from './Actions/ProcessFlashcards'\nimport ChangeUserSettings from './components/ChangeUserSettings';\nimport DeckForm from './components/DeckSection/DeckForm'\nimport fetchData from './Actions/FetchData'\nimport Table from './components/Table'\nimport getDecksData from './Actions/GetDecksData'\n\nfunction App() {\n  const { isAuthenticated, isLoading } = useAuth0();\n  const [updatedUserProfile, setUpdatedUserProfile] = useState(null)\n  const { data: userProfile, isPending, error } = useFetch(`users?authIdentifier=`, updatedUserProfile, \"user\")\n  const [decks, setDecks] = useState(null)\n  const [currentDeck, setCurrentDeck] = useState(null)\n\n\n  const getDefaultDeck = useCallback((decks) => {\n    const defaultDeck = decks.find(deck => deck.deckId === userProfile.defaultDeckId)\n\n        if(defaultDeck === undefined) {\n          const newestDeck = decks.reduce((l,d) => l.dueDate > d.dueDate ? l : d)\n          newestDeck.flashcards = processFlashcards(newestDeck)\n          return newestDeck;\n        }\n        else {\n           defaultDeck.flashcards = processFlashcards(defaultDeck)\n           return defaultDeck;\n        }\n  },[userProfile.defaultDeckId])\n\n  // sets the decks after userProfile is loaded\n  useEffect(() => {\n    if (userProfile && !isPending && userProfile.decks) {\n        setDecks(userProfile.decks)\n    }\n  }, [userProfile, isPending])\n\n  // sets the default deck after setDecks\n  useEffect(() => {\n    if (userProfile && !isPending && decks) {\n      if (!currentDeck && decks.length > 0) {\n\n        const newCurrentDeck = getDefaultDeck(decks)\n        setCurrentDeck(newCurrentDeck)\n    }\n}\n}, [decks, currentDeck, isPending, userProfile, getDefaultDeck])\n\n\n  useEffect(() => {\n    if (userProfile) {\n      console.log(userProfile)\n      setUpdatedUserProfile(null)\n    }\n  }, [userProfile])\n\n// add new deck\n  const addDeck = async (deckToAdd) => {\n    deckToAdd.userId = userProfile.userId\n    const { dataFromServer: newDeck, error } = await fetchData(`decks/`, 'POST', deckToAdd)\n    if (error) {\n      console.log(error)\n    }\n    else {\n      newDeck.flashcards = []\n      setCurrentDeck(newDeck)\n      setDecks([...decks, newDeck])\n    }\n\n  }\n\n  // delete deck\n  const deleteDeck = async (deckId) => {\n    const { error } = await fetchData(`decks/${deckId}`, 'DELETE')\n    if (error) {\n      console.log(error)\n    }\n    else {\n      const newDecks = decks.filter((deck) => deck.deckId !== deckId)\n      setDecks(newDecks)\n\n      if(deckId === currentDeck.deckId) {\n        const newCurrentDeck = getDefaultDeck(newDecks)\n        setCurrentDeck(newCurrentDeck)\n      }\n    }\n\n  }\n\n  //google-oauth2|109641767784145272988\n  // fetch decks\n\n  return (\n    <Router>\n      <>\n      {console.log(error)}\n        <Header isAuthenticated={isAuthenticated} isLoading={isLoading}/>\n        {!isPending && <nav className=\"border-2 border-bookBlue flex justify-evenly p-2 bg-white   text-2xl \">\n            <NavLink className=\"hover:text-viola-600\" activeClassName=\"font-semibold\" to=\"/home\"><svg className=\"w-6 inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n</svg>Home</NavLink>\n            <NavLink className=\"hover:text-viola-600\" activeClassName=\"font-semibold\" to=\"/decks/add\"><svg className=\"w-6 inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n</svg>Create new deck</NavLink>\n            <NavLink className=\"hover:text-viola-600\" activeClassName=\"font-semibold\" to=\"/decks/change\"><svg className=\"w-6 inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\" />\n</svg>Change deck</NavLink>\n            <NavLink className=\"hover:text-viola-600\" activeClassName=\"font-semibold\" to=\"/User/Settings\"><svg className=\"w-6 inline-block\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n  <path fill-rule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clip-rule=\"evenodd\" />\n</svg>User settings</NavLink>\n        </nav>}\n\n        <main className='px-16 py-6 bg-gray-100'>\n\n          {/* Initial redirects */}\n          {!isLoading ?\n             <Route path=\"/\" exact>\n              <>\n                {!isAuthenticated ? <Redirect to=\"/welcome\" />\n                  : !isPending ? <Redirect to=\"/home\" />\n                  : <button type=\"button\" class=\"bg-rose-600\" disabled><svg class=\"animate-spin h-5 w-5 mr-3\" viewBox=\"0 0 24 24\"></svg>Loading ... </button>}\n              </>\n              </Route>: <button type=\"button\" class=\"bg-rose-600\" disabled><svg class=\"animate-spin h-5 w-5 mr-3\" viewBox=\"0 0 24 24\"></svg>jesus Loading</button>}\n\n            {/* Welcome page */}\n            <Route path=\"/welcome\">\n              <Welcome/>\n            </Route>\n\n            {/* home page */}\n            <Route path=\"/home\">\n              {currentDeck ? <>\n                <DeckSection currentDeck={currentDeck} decks={decks} setDecks={setDecks} setCurrentDeck={setCurrentDeck} userProfile={userProfile}/>\n                {\n                  <div className=\"flex justify-center text-4xl\">\n                    <div className=\" p-4 w-1/2 flex justify-center text-center\">\n                      <Link className=\"h-12 w-40 btn text-8xl transition-colors duration-150 bg-puertoRico-300 border focus:shadow-outline hover:bg-puertoRico-100\" to =\"/flashcards\">Start</Link>\n                    </div>\n                  </div>}\n              </>: isAuthenticated ? <h1>No decks, create one to get started</h1> : null}\n            </Route>\n            \n            {/* User settings */}\n            <Route path=\"/User/Settings\">\n              {userProfile && userProfile.decks ? <ChangeUserSettings userProfile={userProfile} setUpdatedUserProfile={setUpdatedUserProfile} /> : null}\n            </Route>\n            \n            {/* Add deck */}\n              {isAuthenticated && userProfile ?\n                <Route path=\"/decks/add\">\n                  <div className=\"container blue-border\">\n                    <DeckForm processDeck={addDeck} headerText=\"Create new deck:\" />\n                  </div>\n                </Route>\n                : null\n              }\n\n            {/* Manage decks */}\n            <Route path=\"/decks/change\">\n              {decks && currentDeck ? \n              <>\n              <header>\n                    <h4>Change deck:</h4>\n              </header>\n              <div className=\"container blue-border\">\n              {decks.length > 0 ? \n                   <Table className=\"deck-table\" tableData={getDecksData(decks,currentDeck,setCurrentDeck,deleteDeck)} headers={[{ columnName: 'Name', objectProperty: 'select' }, { columnName: \"Words\", objectProperty: \"wordCount\" },{ columnName: \"Due\", objectProperty: \"dueCount\" }, { objectProperty: \"deleteButton\" }]} />\n                  : <h3>No decks yet, create deck to get started</h3>}\n                  <div className=\"center\">\n                  <Link className=\"back-link\" to =\"/home\">Back</Link>\n                  </div>\n                  </div>\n                  </> : null}\n            </Route>\n\n\n\n            <Route path=\"/Flashcards\">\n              {isAuthenticated &&\n                <div className=\"container\">\n                  {currentDeck &&\n                    <>\n                      <Flashcards userProfile={userProfile} currentDeck={currentDeck} setCurrentDeck={setCurrentDeck}/>\n                    </>\n                  }\n                </div>}\n            </Route>\n\n        </main>\n        <footer className=\"border-t-4 border-white bg-bookBlue\">This is the footer</footer>\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\nimport { Auth0Provider } from \"@auth0/auth0-react\"\nimport reportWebVitals from './reportWebVitals';\n\nconst domain = process.env.local.REACT_APP_AUTH0_DOMAIN;\nconst clientId = process.env.local.REACT_APP_AUTH0_CLIENT_ID;\n\nReactDOM.render(\n  <Auth0Provider\n    domain={domain}\n    clientId={clientId}\n    redirectUri={window.location.origin}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}